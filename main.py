import telebot
from telebot import types
import json
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 7300105507
CHANNEL_USERNAME = "hgnicedkwinofficialchannel"
PROOF_CHANNEL = "paymentbotproof"
DATA_FILE = "data.json"
REF_AMOUNT = 100
MIN_WITHDRAW = 2000

bot = telebot.TeleBot(TOKEN)

if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, "w") as f:
        json.dump({}, f)


def load_data():
    with open(DATA_FILE, "r") as f:
        return json.load(f)


def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)


def is_member(user_id, channel):
    try:
        member = bot.get_chat_member(f"@{channel}", user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False


def main_menu():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(types.KeyboardButton("ЁЯСд ржкрзНрж░рзЛржлрж╛ржЗрж▓"),
               types.KeyboardButton("ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕"),
               types.KeyboardButton("ЁЯФЧ рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ"),
               types.KeyboardButton("ЁЯУд ржЙржЗржержбрзНрж░"),
               types.KeyboardButton("ЁЯЖШ рж╕рж╛рж╣рж╛ржпрзНржп"))
    return markup


def join_channel_message(chat_id):
    join_markup = types.InlineKeyboardMarkup()
    join_markup.add(
        types.InlineKeyboardButton("тЬЕ ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржХрж░рзБржи",
                                   url=f"https://t.me/{CHANNEL_USERNAME}"))
    join_markup.add(
        types.InlineKeyboardButton("тЩ╗я╕П ржЖржмрж╛рж░ ржЪрзЗржХ ржХрж░рзБржи",
                                   callback_data="check_join"))
    bot.send_message(chat_id, "тЭЧя╕П ржкрзНрж░ржержорзЗ ржЖржорж╛ржжрзЗрж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬржпрж╝рзЗржи ржХрж░рзБржиред\n\n"
                     "ржПржЗ ржмржЯ ржжрж┐ржпрж╝рзЗ ржЖржкржирж┐ рж░рзЗржлрж╛рж░ ржХрж░рзЗ ржлрзНрж░рж┐рждрзЗ ржЗржиржХрж╛ржо ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред\n"
                     f"ржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗ ржкрж╛ржмрзЗржи *{REF_AMOUNT} ржЯрж╛ржХрж╛*!",
                     reply_markup=join_markup,
                     parse_mode='Markdown')


def join_proof_channel_message(chat_id):
    join_markup = types.InlineKeyboardMarkup()
    join_markup.add(
        types.InlineKeyboardButton("тЬЕ ржкрзЗржорзЗржирзНржЯ ржкрзНрж░рзБржл ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржХрж░рзБржи",
                                   url=f"https://t.me/{PROOF_CHANNEL}"))
    join_markup.add(
        types.InlineKeyboardButton("тЩ╗я╕П ржЖржмрж╛рж░ ржЪрзЗржХ ржХрж░рзБржи",
                                   callback_data="check_proof_join"))
    bot.send_message(chat_id, "тЭЧя╕П ржкрзЗржорзЗржирзНржЯ ржкрзНрж░рзБржл ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржХрж░рж╛ ржЖржмрж╢рзНржпржХ!\n\n"
                     "ЁЯСЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржи ржерзЗржХрзЗ ржЬржпрж╝рзЗржи ржХрж░рзБржиред",
                     reply_markup=join_markup)


admin_states = {}  # admin user_id -> state


@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = str(message.from_user.id)
    data = load_data()

    # ржорзЗржЗржи ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржЪрзЗржХ
    if not is_member(message.from_user.id, CHANNEL_USERNAME):
        join_channel_message(message.chat.id)
        return

    # ржкрзЗржорзЗржирзНржЯ ржкрзНрж░рзБржл ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржЪрзЗржХ
    if not is_member(message.from_user.id, PROOF_CHANNEL):
        join_proof_channel_message(message.chat.id)
        return

    args = message.text.split()
    ref = None
    if len(args) > 1:
        ref = args[1]

    if user_id not in data:
        data[user_id] = {
            "balance": 0,
            "ref_by": None,
            "name": message.from_user.first_name,
            "ref_count": 0
        }
        # рж░рзЗржлрж╛рж░ ржпрзЛржЧ ржХрж░рзБржи ржпржжрж┐ ржорж╛ржирзНржп рж╣ржпрж╝
        if ref and ref != user_id and ref in data:
            data[ref]["balance"] += REF_AMOUNT
            data[ref]["ref_count"] += 1
            data[user_id]["ref_by"] = ref
            # Notify referrer about new referral
            try:
                bot.send_message(
                    int(ref),
                    f"ЁЯОЙ ржирждрзБржи рж░рзЗржлрж╛рж░рзЗрж▓! ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕рзЗ +{REF_AMOUNT} ржЯрж╛ржХрж╛ ржпрзБржХрзНржд рж╣ржпрж╝рзЗржЫрзЗред"
                )
            except:
                pass
        save_data(data)

    first_name = message.from_user.first_name
    bot_username = bot.get_me().username

    text = (
        f"ЁЯСЛ *рж╕рзНржмрж╛ржЧрждржо* `{first_name}`!\n\n"
        f"ЁЯТ╕ ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: *{data[user_id]['balance']} ржЯрж╛ржХрж╛*\n\n"
        f"ЁЯФЧ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ:`https://t.me/{bot_username}?start={user_id}`\n\n"
        f"ЁЯУв ржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗ ржкрж╛ржмрзЗржи *{REF_AMOUNT} ржЯрж╛ржХрж╛*ред\n\n"
        f"тЬЕ ржЖржкржирж╛рж░ ржорзЛржЯ рж░рзЗржлрж╛рж░: *{data[user_id]['ref_count']}*\n\n"
        f"ЁЯЫая╕П ржирж┐ржЪрзЗрж░ ржорзЗржирзБ ржерзЗржХрзЗ ржкржЫржирзНржжрж╕ржЗ ржЕржкрж╢ржи ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред")
    bot.send_message(message.chat.id,
                     text,
                     reply_markup=main_menu(),
                     parse_mode='Markdown')


@bot.callback_query_handler(func=lambda c: c.data == "check_join")
def check_join_callback(call):
    if is_member(call.from_user.id, CHANNEL_USERNAME):
        bot.answer_callback_query(call.id, "тЬЕ ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржирж┐рж╢рзНржЪрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ!")
        start_handler(call.message)
    else:
        bot.answer_callback_query(call.id,
                                  "тЭМ ржЖржкржирж┐ ржПржЦржирзЛ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬржпрж╝рзЗржи ржХрж░рзЗржиржирж┐!",
                                  show_alert=True)


@bot.callback_query_handler(func=lambda c: c.data == "check_proof_join")
def check_proof_join_callback(call):
    if is_member(call.from_user.id, PROOF_CHANNEL):
        bot.answer_callback_query(call.id,
                                  "тЬЕ ржкрзЗржорзЗржирзНржЯ ржкрзНрж░рзБржл ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржирж┐рж╢рзНржЪрж┐ржд!")
        start_handler(call.message)
    else:
        bot.answer_callback_query(
            call.id,
            "тЭМ ржЖржкржирж┐ ржПржЦржирзЛ ржкрзЗржорзЗржирзНржЯ ржкрзНрж░рзБржл ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬржпрж╝рзЗржи ржХрж░рзЗржиржирж┐!",
            show_alert=True)


@bot.message_handler(func=lambda message: True)
def message_handler(message):
    user_id = str(message.from_user.id)
    data = load_data()

    # Check channel joins again on every button press
    if not is_member(message.from_user.id, CHANNEL_USERNAME):
        join_channel_message(message.chat.id)
        return

    if not is_member(message.from_user.id, PROOF_CHANNEL):
        join_proof_channel_message(message.chat.id)
        return

    if user_id not in data:
        bot.send_message(message.chat.id, "тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ /start ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ ржХрж░рзБржиред")
        return

    # Admin panel: handle admin states
    if message.from_user.id == ADMIN_ID:
        state = admin_states.get(user_id)
        if state == "broadcast":
            if message.text == "/cancel":
                admin_states[user_id] = None
                bot.send_message(message.chat.id,
                                 "тЭМ ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
            else:
                # Broadcast message to all users
                for uid in data.keys():
                    try:
                        bot.send_message(
                            int(uid),
                            f"ЁЯУв *ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржорзЗрж╕рзЗржЬ*\n\n{message.text}",
                            parse_mode="Markdown")
                    except:
                        pass
                admin_states[user_id] = None
                bot.send_message(message.chat.id,
                                 "тЬЕ ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред")
            return

        if message.text == "/broadcast":
            admin_states[user_id] = "broadcast"
            bot.send_message(
                message.chat.id,
                "ЁЯУв ржмрзНрж░ржбржХрж╛рж╕рзНржЯ ржорзЗрж╕рзЗржЬ рж▓рж┐ржЦрзБржиред ржмрж╛рждрж┐рж▓ ржХрж░рждрзЗ /cancel рж▓рж┐ржЦрзБржиред")
            return

    text = message.text

    if text == "ЁЯСд ржкрзНрж░рзЛржлрж╛ржЗрж▓":
        user = data[user_id]
        txt = (
            f"ЁЯСд *ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рждржерзНржп*\n\n"
            f"ЁЯУЗ ржирж╛ржо: `{user.get('name', 'NA')}`\n\n"
            f"ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: *{user.get('balance', 0)} ржЯрж╛ржХрж╛*\n\n"
            f"ЁЯФЧ ржорзЛржЯ рж░рзЗржлрж╛рж░: *{user.get('ref_count', 0)}*\n\n"
            f"ЁЯОБ рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ:`https://t.me/{bot.get_me().username}?start={user_id}`"
        )
        bot.send_message(message.chat.id, txt, parse_mode='Markdown')

    elif text == "ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕":
        bal = data[user_id].get("balance", 0)
        bot.send_message(message.chat.id,
                         f"ЁЯТ░ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: *{bal} ржЯрж╛ржХрж╛*",
                         parse_mode='Markdown')

    elif text == "ЁЯФЧ рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ":
        bot_username = bot.get_me().username
        ref_link = f"https://t.me/{bot_username}?start={user_id}"
        bot.send_message(message.chat.id,
                         f"ЁЯОБ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ:`{ref_link}`",
                         parse_mode='Markdown')

    elif text == "ЁЯУд ржЙржЗржержбрзНрж░":
        bal = data[user_id].get("balance", 0)
        if bal < MIN_WITHDRAW:
            bot.send_message(
                message.chat.id,
                f"тЭМ ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржп ржирзНржпрзВржирждржо ржмрзНржпрж╛рж▓рзЗржирзНрж╕ *{MIN_WITHDRAW} ржЯрж╛ржХрж╛*ред\nржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: *{bal} ржЯрж╛ржХрж╛*",
                parse_mode='Markdown')
            return
        msg = bot.send_message(message.chat.id,
                               "ЁЯУ▓ ржЖржкржирж╛рж░ bKash ржЕржержмрж╛ Nagad ржирж╛ржорзНржмрж╛рж░ ржжрж┐ржи:")
        bot.register_next_step_handler(msg, process_withdraw)

    elif text == "ЁЯЖШ рж╕рж╛рж╣рж╛ржпрзНржп":
        bot.send_message(message.chat.id,
                         "ЁЯУЮ рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи: @falco1013")

    else:
        bot.send_message(message.chat.id,
                         "тЭУ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐, ржирж┐ржЪрзЗрж░ ржорзЗржирзБ ржерзЗржХрзЗ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред",
                         reply_markup=main_menu())


def process_withdraw(message):
    number = message.text.strip()
    user_id = str(message.from_user.id)
    data = load_data()
    amount = data[user_id].get("balance", 0)

    if amount < MIN_WITHDRAW:
        bot.send_message(
            message.chat.id,
            f"тЭМ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржХржоред ржирзНржпрзВржирждржо {MIN_WITHDRAW} ржЯрж╛ржХрж╛ ржкрзНрж░ржпрж╝рзЛржЬржиред")
        return

    data[user_id]["balance"] = 0
    save_data(data)

    bot.send_message(
        message.chat.id, f"тЬЕ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ ржЕржирзБрж░рзЛржз ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\n"
        f"ЁЯТ╕ ржкрж░рж┐ржорж╛ржг: {amount} ржЯрж╛ржХрж╛\n"
        f"ЁЯУ▒ ржирж╛ржорзНржмрж╛рж░: {number}\n\n"
        f"рж╢рзАржШрзНрж░ржЗ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рж╛ рж╣ржмрзЗред ржзржирзНржпржмрж╛ржж!")

    bot.send_message(
        ADMIN_ID, f"ЁЯЖХ ржирждрзБржи ржЙржЗржержбрзНрж░ ржЕржирзБрж░рзЛржз:\n"
        f"ЁЯСд ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА: {message.from_user.first_name}\n"
        f"ЁЯЖФ ржЖржЗржбрж┐: {user_id}\n"
        f"ЁЯТ░ ржкрж░рж┐ржорж╛ржг: {amount} ржЯрж╛ржХрж╛\n"
        f"ЁЯУ▒ ржирж╛ржорзНржмрж╛рж░: {number}")


bot.infinity_polling()
